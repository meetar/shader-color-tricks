sources:
    mapzen:
        type: TopoJSON
        url: https://meetar.github.io/mapzen-tiles/vector/v1/256/all/{z}/{x}/{y}.topojson
styles:
    custom:
        lighting: false
        base: polygons
        shaders:
            blocks:
                global: |
                    vec3 unpackColor(float f) {
                        f *= 215.;
                        // round to ints
                        f = floor(f + 0.5);
                        vec3 color;
                        color.b = floor(f / 36.);
                        color.g = floor((f - color.b * 36.) / 6.);
                        color.r = floor(f - color.b * 36. - color.g * 6.);
                        // now we have a vec3 with the 3 components in range [0..5]. Let's normalize it!
                        if (color.r > 5.) return vec3(1, 0, 0);
                        return color / 5.;
                    }

                color: |
                    // int i = int(floor(v_color.r * 5.));
                    // if (i == 0) color.rgb = vec3(1.0, 0.0, 0.0);
                    // if (i == 1) color.rgb = vec3(1.0, 1.0, 0.0);
                    // if (i == 2) color.rgb = vec3(0.0, 1.0, 0.0);
                    // if (i == 3) color.rgb = vec3(0.0, 1.0, 1.0);
                    // if (i == 4) color.rgb = vec3(0.0, 0.0, 1.0);
                    // color.rgb = hsl2rgb(vec3(v_color.r, 1., .5));
                    color.rgb = unpackColor(v_color.r);
                    // color.rgb = vec3(0, 0, color.r);
layers:
    earth:
        data: { source: mapzen }
        draw:
            polygons:
                order: 0
                color: grey
    water:
        data: { source: mapzen }
        draw:
            polygons:
                order: 1
                color: lightblue
    buildings:
        data: { source: mapzen }
        draw:
            custom:
                order: 1
                color: |
                    function() {
                        function hexToRgb(hex) {
                            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                            return result ? {
                                r: parseInt(result[1], 16),
                                g: parseInt(result[2], 16),
                                b: parseInt(result[3], 16)
                            } : null;
                        }

                        function packColor(color) {
                            return color.r + color.g * 6. + color.b * 36.;
                        }

                        // stufing hex values into a single 256-bit float
                        // (only using websafe 216-color palette)
                        c = '99ffff';
                        f = hexToRgb(c);
                        r = f.r/255*5;
                        g = f.g/255*5;
                        b = f.b/255*5;
                        color = packColor({r, g, b});
                        final = color/215;
                        return [final, 0, 0];
                    }