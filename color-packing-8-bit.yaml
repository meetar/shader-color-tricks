sources:
    mapzen:
        type: TopoJSON
        url: https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson
        url_params:
            api_key: vector-tiles-_vxMzew
styles:
    custom:
        lighting: false
        base: polygons
        shaders:
            blocks:
                global: |
                    // unpack a float packed by the websafe colorpacker
                    vec3 unpackColor(float f) {
                        f *= 255.;
                        // round to ints - important!
                        f = floor(f + .5);
                        vec3 color;
                        color.r = floor(f / 32.);
                        color.g = floor((f - color.r * 32.) / 4.);
                        color.b = floor(f - color.r * 32. - color.g * 4.);
                        // now we have a vec3 with r and g in range [0..7] and b in range [0..3]. Let's normalize it!
                        return vec3(color.r / 7., color.g / 7., color.b / 3.);
                    }

                color: |
                    color.rgb = unpackColor(v_color.r);
layers:
    earth:
        data: { source: mapzen }
        draw:
            polygons:
                order: 0
                color: grey
    water:
        data: { source: mapzen }
        draw:
            polygons:
                order: 1
                color: lightblue
    buildings:
        data: { source: mapzen }
        draw:
            custom:
                order: 1
                color: |
                    function() {
                        function hexToRgb(hex) {
                            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                            return result ? {
                                r: parseInt(result[1], 16),
                                g: parseInt(result[2], 16),
                                b: parseInt(result[3], 16)
                            } : null;
                        }

                        // stuffing hex values into a single 256-bit float
                        function packColor(color) {
                            return color.r * 32. + color.g * 4. + color.b;
                        }

                        // R and G get 8 values per channel, 00, 25, 49, 6E, 92, B7, DB, FF
                        // B only gets 4 values per channel, 00, 55, AA, FF
                        // values are rounded down.
                        c = '0000ff';

                        f = hexToRgb(c);
                        r = f.r/255*7;
                        g = f.g/255*7;
                        b = f.b/255*3;
                        color = packColor({r, g, b});
                        final = color/255;
                        return [final, 0, 0];
                    }